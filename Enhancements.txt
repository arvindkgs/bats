NOTES:
-----------------------------------------------------------------------------------------------------------------------------------------
1. If dependent py_modules cannot be installed, the go for the custom JSON parser, but remember to implement following feature for (OHS):
   '..' - go to any depth and fetch the item/s named the following word
   Example: IfModule..mpm_worker_module..ServerLimit
   So in 'IfModule' go to its children/grandchildren/great-grandchildren/etc, till 'mpm_worker_module' is found.
2. Using the 'jsonpath_rw_ext' parser, causes it to return only elements that are found, unlike custom JSON parser that adds 'None'
   if particular object in array does not have property.
   This should not affect unless a property can have multiple values.
3. The dynamic block produces a list of values.
           * Each value from this list is used to evaluate a source and corresponding property value.
           * These values are then compared.
           * So based on the ordering of the dynamic block values, source and target properties are computed and compared.
           * So LIMITATION is extrapolation resulting in size(n) source properties, should also result in similar extrapolation
             on the target as well.
4. Now dynamic map can store dict type object and used to extrapolate('property', 'file', 'hostname', 'username',
   'password' elements in metadata) by attributes of each object. Note that if the attribute is list type then it will
   iterate over each of the list objects and get the corresponding values, so effectively flattening the list.

   The dynamic block produces a list of values.
* Each value from this list is used to evaluate a source and corresponding property value.
* These values are then compared.
* So based on the ordering of the dynamic block values, source and target properties are computed and compared.
* So LIMITATION is extrapolation resulting in size(n) source properties, should also result in similar extrapolation
on the target as well.

To-Do
-----------------------------------------------------------------------------------------------------------------------------------------
1. Convert tests to use the Resource objects instead of using the logs, so logs can have timestamp and run time. And this also allows using PyTest or other frameworks for testing
2. Use REGEX for parsing format text.
3. Currently each dynamic property is computed as list of values with file attribute of the dynamic component being a single file.
   * PROBLEM: However if the file attribute of the dynamic component is itself extrapolated to multiple files, then how to handle?
   * SOLUTION *
       * REFACTOR: Store each dynamic property as list of properties instead of list of values, so it can be a 2x2 where property is
            corresponding to a file.
       * CONSTRUCT: use the 'foreach' construct in the '${}' to make the list to be grouped on the property, versus the default which expands
            to a single list.
       * IMPACT:
            Consider following 'check':
            {
              "name": "Max capacity",
              "type": "COMPARE",
              "source": {
                "file": "metadatas/tests/jdbc/source.json",
                "type": "JSON",
                "property": "$.topology.wlsTunings[?(@.applicationName=${applicationName}&@.attributeName=MaxCapacity)].value"
              },
              "target": {
                "file": "metadatas/tests/${jdbcfileName}",
                "type": "XML",
                "property": "jdbc-data-source.jdbc-connection-pool-params.max-capacity"
              }
            }
            The 'target' has a 'file' attribute that is extrapolated to a list (above check is 'one-to-one' default) and each source item
            is compared to a target item.
            Now if : "file": "metadatas/tests/${jdbcfileName}" -> "file": "metadatas/tests/${foreach:jdbcfileName}"
            This means that each property of the dynamic property ${jdbcfileName}, is grouped by the dynamic property file,
            and the 'file' will give a list of properties grouped by the same dynamic property file.
            Now if cardinality of check is 'one-to-one', the all values inside all properties will be flattened to single list and source values
            are compared to all target values, but if it is 'one-to-many' then source values is compared to the value list of each property
            of the file attribute separately.
   OR
   * SOLUTION * This feels better, this can also potentially remove 'cardinality' construct *
   Introduce 'for' construct as,
   "checks": [{
        name: "JDBC Check"
        for: {
            each: "folder", //Add temporarily to dynamic map
            in: {
                "property": "ls /domain",
                "type": "SHELL"
            }
            do: {
                "dynamic": [{
                    "key": "config-file"
                    "property": "ls ${folder}/config.xml"
                    "type": "SHELL"
                }],
                "source": {}
                "target": { "file": "${config-file}"}
            }
        } //Remove the each variable from dynamic map
   }]
4. Allow storing properties as object in dynamicProperty map. For example,
        'cat /etc/hosts' shell command produces output:
        10.249.88.121 prc-internal.oracleoutsourcing.com
        10.249.88.121 prj-internal.oracleoutsourcing.com
        10.249.88.121 scm-internal.oracleoutsourcing.com
        This is split on ' ' (by default), and stored as an array as, ['10.249.88.121','prc-internal.oracleoutsourcing.com'] in the dynamicProperties as
        [
            ['10.249.88.121','prc-internal.oracleoutsourcing.com'],
            ['10.249.88.121','prc-internal.oracleoutsourcing.com'],
            ['10.249.88.121','prc-internal.oracleoutsourcing.com']
        {
          "key": "ip_domain",
          "type": "SHELL",
          "property": "cat /etc/hosts",
          "value": {
            "type": "array",
            "format": ["__split__"]
          }
        }
        Below also produces similar output as above, however it is stored as dict as, {'prc-internal.oracleoutsourcing.com': '10.249.88.121'} in the dynamicProperties as
        [
            {'prc-internal.oracleoutsourcing.com': '10.249.88.121'},
            {'prc-internal.oracleoutsourcing.com': '10.249.88.121'},
            {'prc-internal.oracleoutsourcing.com': '10.249.88.121'}
        ]
        {
          "key": "ip_domain",
          "type": "SHELL",
          "property": "cat /etc/hosts",
          "value": {
            "type": "dict",
            "key": ["__split__", "__index__,1"],
            "value": ["__split__", "__index__,0"]
          }
        }
        NOTE: "value" must be processed after "format" in Resource element type
5. Refactor to include exception handling
6. Use multiprocessing to allow parallel execution of checks/tests (Refer- https://docs.python.org/2/library/multiprocessing.html, https://realpython.com/lessons/parallel-processing-multiprocessing-overview/)
7. Provide verbose/detailed logging
8. Add check type - SUCCESS, which verifies SHELL command succeeded

Done
---------------------------------------------------------------------------------------------------------------------------------------
1. Reduce repeatations using dynamic (for-each) construct
2. Run Unit tests for multiple positive and negative permutation scenarios
3. Use POJO for storing property instead of tuple to avoid array of values when using extend.
4. Add name to dynamic property instead of referring to it using index.
5. Add SHELL type.
6. Speed up dynamic matching by storing global dynamic map,
    4.1 Previously compare fetches same dynamic values from JSON for each check.
    4.2 Now dynamic map can store objects in map in global scope and reuse for each check.
       "tests": [{
           "dynamic": [
            {
              "key": "clusterObj",
              "file": "metadatas/tests/jvm/source.json",
              "type": "JSON",
              "property": "$..wlsClusters[*]"
            }
          ],
          "checks": [
            {
              "name": "Xms Check",
              "type": "COMPARE",
              "source": {
                "property": "$..wlsClusters[?(@.clusterName=${clusterObj.clusterName})].Xms",
                "file": "metadatas/tests/jvm/source.json",
                "type": "JSON"
              },
              "target": {
                "property": "fusion.FADomain.${clusterObj.clusterName}.default.minmaxmemory.main",
                "file": "metadatas/tests/jvm/target.properties",
                "type": "PROPERTY",
                "format": "-Xms{}?"
              }
            }
          ]
       }]
7. Modified ShellHandler to execute ssh/scp commands on fly rather than invoking a .sh file, which requires the .sh file to have execute permission
8. Build project as module that can easily be distributed as tar/whl and installed using PIP
-----------------------------------------------------
                    V2
-----------------------------------------------------
9. Add STATIC type.
10. Support for dynamic above 'tests' element
11. Support for following remote get:
         * no-password
         * no-username, no-password
         * no-username
12. Added support for multiple hosts in resource. By default, for each host in 'hostname' element, all files in 'file' element are fetched.
13. Support cardinality in resource like 'source' element and 'target' element. Default behavior is 'one-to-many'. This to support 'one-to-one' case. For example,
consider, first host in hostnames, should be used for to fetch only first file in 'file's for a particular resource(source or target), second host for second file and so on.
This is supported using 'one-to-one' cardinality.
14. Added 'join' element to Resource (source, target, dynamic) which flattens the property list into a single string by joining the individual items in the properties using the join string.
15. Added subcommands 'extract' for extracting the value given the property and file.
    usage: python -m bats extract file property [-h] [-D KEY=VALUE]
                           [--failon ERROR-TYPE [ERROR-TYPE ...]]
                           [--type TYPE]
    Required arguments:
      file                  File to extract property from
      property              Property to extract

    optional arguments:
      -h, --help            show this help message and exit
      -D KEY=VALUE          Dynamic values to be passed
      --failon ERROR-TYPE [ERROR-TYPE ...]
                            Fail validation when this type of message is
                            encountered
      --type TYPE           Optional file type, if file extension is not correct.
                            Supported file types = JSON, XML, PROPERTIES, CONFIG