(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{118:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return u}));var r=n(2),a=n(6),c=(n(0),n(134)),l={id:"doc2",title:"Metadata"},o={id:"doc2",isDocsHomePage:!1,title:"Metadata",description:"The main component of the automation tool is metadata. Metadata can be created based on custom requirement. Structure of metadata is as follows:",source:"@site/docs/metadata.md",permalink:"/bats/docs/doc2",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/metadata.md",sidebar:"someSidebar",previous:{title:"Architecture",permalink:"/bats/docs/"},next:{title:"Build",permalink:"/bats/docs/doc3"}},s=[],i={rightToc:s};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"The main component of the automation tool is metadata. Metadata can be created based on custom requirement. Structure of metadata is as follows:"),Object(c.b)("p",null,"{"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{}),'"name": "Name of validation",\n\n"log": "location",\n\n"description": "Description",\n\n"test": [\n\n    {\n\n        "name": "Test Name",\n\n        "dynamic": [\n\n                    {\n\n                        Resource\n\n                    }\n\n        ]\n\n        "check": [\n\n            {\n\n                "name": "Check Name",\n\n                "cardinality": ""\n\n                "source": {\n\n                    Resource\n\n                }\n\n                "target": {\n\n                    Resource\n\n                }\n\n            }\n\n        ]\n\n    }\n\n]\n')),Object(c.b)("p",null,"}"),Object(c.b)("p",null,"check cardinality"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{}),"one-to-one (default) : first source item is compared to first target item, second source item to second target item. And so on.\none-to-many : each source item is compared to all target item\n")),Object(c.b)("p",null,"Here one resource item is values from one file.\nResource"),Object(c.b)("p",null,"{"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{}),'"property": "",\n\n"type": "",\n\n"key": "Key Name",\n\n"file": "File path",\n\n"hostname": "",\n\n"username": "",\n\n"password": "",\n\n"format": "",\n\n"cardinality": ""\n')),Object(c.b)("p",null,"}"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{}),"property \n")),Object(c.b)("p",null,"This defines the property to fetch. This is specified for following types as,"),Object(c.b)("p",null,"JSON - JSONPath. To verify use - ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"https://jsonpath.curiousconcept.com/"}),"https://jsonpath.curiousconcept.com/")),Object(c.b)("p",null,"XML - XPath"),Object(c.b)("p",null,"PROPERTIES - Key match"),Object(c.b)("p",null,"CONF - XPath. (The conf file is converted to an intermediate xml file.)"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{}),"type\n")),Object(c.b)("p",null,"JSON, XML, PROPERTIES, CONFIG, SHELL, STATIC"),Object(c.b)("p",null,"If type is JSON, XML, CONFIG, file is required."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{}),"hostname, username, password\n")),Object(c.b)("p",null,"used to specific remote file which is fetched using scp"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{}),"format\n")),Object(c.b)("p",null,"extract data from string using below format"),Object(c.b)("p",null,"meta-chars: {}, ?"),Object(c.b)("p",null,"Example:"),Object(c.b)("p",null,"Format='-Xms{}?'"),Object(c.b)("p",null,"String='-Xms512m -Xmx8192m -Xss102400k'"),Object(c.b)("p",null,"Extracted Data=512"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{}),"cardinality \n")),Object(c.b)("p",null,"one-to-many= This is default. Consider property is an array. And file is also array. Each property is fetched from all the files."),Object(c.b)("p",null,"one-to-one = Consider property is an array. And file is also array. Now first property is fetched from first file, second property from second file. And so on."),Object(c.b)("p",null,"Extrapolate"),Object(c.b)("p",null,"Extrapolation is where values from dynamic map replace the placeholder in the string. The specific value from dynamic map is referred using its key name in the format - ${key}"),Object(c.b)("p",null,"Example: in string 'wlscluster","[${clusterIndex}]","' ${clusterIndex}' is replaced by value found for 'clusterIndex' key in dynamic properties"),Object(c.b)("p",null,"If clusterIndex = ","[0, 1, 2]"," then"),Object(c.b)("p",null,"Result"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{}),"wlscluster[0]\nwlscluster[1]\nwlscluster[2]\n")),Object(c.b)("p",null,"Hence here one property - 'wlscluster","[${clusterIndex}]","' results in 3 results."),Object(c.b)("p",null,"This can go to multiple levels."),Object(c.b)("p",null,"Example:"),Object(c.b)("p",null,"wlscluster","[${clusterIndex}]",".${clusterName}"),Object(c.b)("p",null,"clusterIndex = ","[0, 1, 2]"," and clusterValue = ","[a, b, c]"),Object(c.b)("p",null,"Intermediate Result"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{}),"wlscluster[0].${clusterName}\nwlscluster[1].${clusterName}\nwlscluster[2].${clusterName}\n")),Object(c.b)("p",null,"Final Result"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{}),"wlscluster[0].a\nwlscluster[0].b\nwlscluster[0].c\nwlscluster[1].a\nwlscluster[1].b\nwlscluster[1].c\nwlscluster[2].a\nwlscluster[2].b\nwlscluster[2].c\n")),Object(c.b)("p",null,"Here one property wlscluster","[${clusterIndex}]",".${clusterName}  resulted in 3x3 = 9 results. Hence the name extrapolation."),Object(c.b)("p",null,"Except type, format, cardinality, key all other resource attributes are extrapolatable"))}u.isMDXComponent=!0},134:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=a.a.createContext({}),u=function(e){var t=a.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.a.createElement(i.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,l=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,d=p["".concat(l,".").concat(m)]||p[m]||b[m]||c;return n?a.a.createElement(d,o(o({ref:t},i),{},{components:n})):a.a.createElement(d,o({ref:t},i))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,l=new Array(c);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var i=2;i<c;i++)l[i]=n[i];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);